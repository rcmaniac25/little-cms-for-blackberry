--Last update: 01/13/2011--
--Revision Used: ??/??/2010-- (the date on which the source code was pulled from GIT)

TODO:
Testing (LCMS 2.0):
-All tests in testcms
-Do cleanup operation for endian (see notes)[do this by checking every call to a read/write function in cmsplugin that has a endian argument]
-Consolidate cmspack functions so that formatters don't just simply call the "actual function"
-Optimize memory in cmsintrp so that it simply passes allocated memory and an index instead of reallocating memory every time certain functions are used used
-Optimize cmsxform.cmsDoTransform so that pointers are reused
-Profile to check memory usage (function calls are less important since they are dynamically chosen and could vary greatly. No real consistancy)
Get full JavaDoc to be created for lcms
Release Version 2.0

Update LCMS 4 BB to LCMS 2.1
Testing (LCMS 2.1)
Release version 2.1

Update LCMS 4 BB to the same level as the GIT build
If Test system has been updated then do testing

Comment PrintUtility and LargeNumber
Update PrintUtility FloatFormat so that it properly processes the values with exponent. Example: Double.MIN_VALUE is a subnormal number. The default manner of execution would consider the value to be zero since the number is so small. Make it so that it will scale the value for exponent.
Update printf and scanf to follow: http://pubs.opengroup.org/onlinepubs/009695399/functions/printf.html, and http://pubs.opengroup.org/onlinepubs/009695399/functions/scanf.html (dedicated functions for printing 'e' and 'a', etc.)
Try to figure out at least the two todo in VirtualPointer

Update Library so that it can (with the compile define "CMS_J2ME") be compiled sans BlackBerry APIs. This way it can be used to produce a J2ME version of LCMS.

See notes

Figure out what the high-level structures should be, then...
Create high-level structures that handle color management in a true OOP fashion.

NOTES:
Version is defines: Major.Minor.Build; Major and Minor are taken from LCMS itself. Build is for modifications done for LCMS 4 BB
VirtualPointer piece is cumbersome but allows internal system to act more like C/C++. If used properly it should be fast and have a low overhead (except when deserializeing items).
Strings follow the guidelines listed in "http://docs.blackberry.com/en/developers/deliverables/3299/JDE_4.5_Fundamentals_Guide.pdf" which state not to use static final for Strings because then Strings need to be loaded multiple times and multiple instances of the same String exist.
See if performance can be improved in cmsintrp, every delegate including and after Eval4InputsFloat recreates cmsInterpParams, the LutTable, and the input params. Sometimes twice, this is a HUGE waste of memory.
Also, on a similar topic as above, nearly every class is a <need word bigger then HUGE> waste of memory. In C/C++ memory needed to be pre-allocated but in Java it does not, thus having the first operation in a function being create 4096 doubles (pretty sure I saw that somewhere) is just unacceptable.
Finally, again based off the above note, something must be done about Strings. The whole "C-string" thing is just not needed and is a waste, since the dev isn't expected to pass in a null-terminated String in the first place it is unneeded to use a null-terminated String. Allocating StringBuffer's with a full-length null String is an even bigger waste. See if it is possible to work around this once everything is working.
When reading/writing tags the endian on a bunch of elements are not correct and have been reversed. Clean this up because there are cases of "make data, reverse endian, put in variable, reverse endian for writing, (in write function) reverse endian for writing, write). They all create small arrays and take up precious time. It may be a IO operation but you don't want it to take forever.

Defines:
CMS_USE_BIG_ENDIAN //Not supported because BlackBerry is little endian, just here so it is explicitly known that it isn't supported [well it is used but it shouldn't be changed, it would screw up pretty much everything]
CMS_DONT_USE_FAST_FLOOR
CMS_DONT_USE_PTHREADS
CMS_USE_PROFILE_BLACK_POINT_TAG
CMS_STRICT_CGATS
CMS_USE_IO_BIT_CONVERTER //Use java.io to convert value types to bytes and back
CMS_RAW_C //Code is similar, to near exact the same as C/C++, not fully used (obviously cumbersome) or implemented. If used there is no guarantee that it will work.
CMS_REALLOC_PTR //By default a C pointer passed into a function is independent of the original pointer unless it is a pointer to the pointer. Since VirtualPointer is a Java class that operation is reversed. This definition reverses the process back to the C process but depending on if the dev is willing to use more memory and the operation is really necessary it can be changed.
CMS_ENABLE_ASSERT //If not in debug compilation mode then assert is ignored, this explicitly enabled it.
CMS_USE_NATIVE_BIGINT //Use a native big int for big number math. This requires Certicom signing if used. By default it is not used
CMS_J2ME //J2ME only version of LCMS. No BlackBerry needed.

Implementation Notes:
cmsSigChromaticAdaptationTag returns a double[], not a cmsMAT3 as what might be expected.
Some extra functions to handle any functions that take/return Strings so they handle Java Strings (no null terminator though it is supported). These functions have "Cleaned" appeneded to the end of the function.
RRT Signing is required.

Small history on PrintUtility:
Done Jan. 1, 2011 at 1:55AM over Steam:
rcmaniac25: Just a few more lines of code and floating point printing will finally be done.
rcmaniac25: a month and a half. Nearly 40k lines of test code. Two previous attempts at librarys. About 300 test cases. Three automated utilities. 5 research papers. Hours of online research. One CS professor referenced. 4 decompiled OS files (totaling about 20k ASM codes). 3 OSs inspected. About 13 photos. And god knows how much food and liquid. It will finally be done...
rcmaniac25: That month and a half were just for this code. The many OS components and the other libraries took a couple months themselves