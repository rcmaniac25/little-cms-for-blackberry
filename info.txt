--Last update: 05/30/2011--
--Revision Used: ??/??/2011-- (the date on which the source code was pulled from GIT)

TODO:
Update LCMS 4 BB to LCMS 2.1
-cmsintrp
-cmslut
-cmspack
-cmstypes
-cmsvirt
Testing (LCMS 2.1)
Get full JavaDoc to be created for lcms
Release version 2.1

Update LCMS 4 BB to the same level as the GIT build
If Test system has been updated then do testing
Get full JavaDoc to be created for lcms

Comment PrintUtility and LargeNumber
Update PrintUtility FloatFormat so that it properly processes the values with exponent. Example: Double.MIN_VALUE is a subnormal number. The default manner of execution would consider the value to be zero since the number is so small. Make it so that it will scale the value for exponent.
Update printf and scanf to follow: http://pubs.opengroup.org/onlinepubs/009695399/functions/printf.html, and http://pubs.opengroup.org/onlinepubs/009695399/functions/scanf.html (dedicated functions for printing 'e' and 'a', etc.)
-printf
--add formatter: a, A
--add formatter: C
--add formatter: S
--add error returns
--make sure format support is limited as specified in 6th paragraph in specification
--make sure that "alt" format works properly
--make sure that "length" components are used properly (they are relatively pointless but increase performance a little since the guess work is removed from data type)
--make sure that "d, i, o, u, x, X" print out properly
--make sure that "f, F, e, E, a, A" print out properly (in conjunction with the rest of next "todo").
--make sure floating point print, prints exponent notation properly (AKA non-zero digits are brought to the front. Might require separate exponent print function [probably desirable])
-scanf
--add unformatter: a, A
--add unformatter: [
--add unformatter: p
--add unformatter: C
--add unformatter: S
--add error returns
--add support for explicit arguments (the %arg_index$format)
--make sure format support is limited as specified in 3rd paragraph in specification
--make sure that proper processing of input and format occur (last 2 paraghraphs before length information)
--make sure that "length" components are used properly (they are relatively pointless but increase performance a little since the guess work is removed from data type)
--make sure that formatter 'i' handles data correctly based on specification of strtol with base 0
--make sure that "d, i, o, u, x, X" read properly
--make sure that "a, A, e, E, f, F, g, G" read properly
--make sure that "s, c" read properly

Try to figure out at least the two todo in VirtualPointer
-Also, partial rewrite. Data, type, and length should be stored in own type. This can then be passed around between different virtual pointer instances (which can have different positions and be doing different things). This removes the "parent/child" pointers and replaces it with "server/client" and allows GC to get rid of everything when nothing is referencing the "internal pointer".

Figure out multi-threading so that buffers can be used instead of constant creation/destruction of memory
-Optimize memory in cmsintrp so that it simply passes allocated memory and an index instead of reallocating memory every time certain functions are used used
-Optimize cmsxform.cmsDoTransform so that pointers are reused
Update Library so that it can (with the compile define "CMS_J2ME") be compiled sans BlackBerry APIs. This way it can be used to produce a J2ME version of LCMS.

See notes

Figure out what the high-level structures should be, then...
Create high-level structures that handle color management in a true OOP fashion.

NOTES:
Version is defines: Major.Minor.Build; Major and Minor are taken from LCMS itself. Build is for modifications done for LCMS 4 BB
VirtualPointer piece is cumbersome but allows internal system to act more like C/C++. If used properly it should be fast and have a low overhead (except when deserializeing items).
Strings follow the guidelines listed in "http://docs.blackberry.com/en/developers/deliverables/3299/JDE_4.5_Fundamentals_Guide.pdf" which state not to use static final for Strings because then Strings need to be loaded multiple times and multiple instances of the same String exist.
See if performance can be improved in cmsintrp, every delegate including and after Eval4InputsFloat recreates cmsInterpParams, the LutTable, and the input params. Sometimes twice, this is a HUGE waste of memory.
Also, on a similar topic as above, nearly every class is a <need word bigger then HUGE> waste of memory. In C/C++ memory needed to be pre-allocated but in Java it does not, thus having the first operation in a function being create 4096 doubles (pretty sure I saw that somewhere) is just unacceptable.
Finally, again based off the above note, something must be done about Strings. The whole "C-string" thing is just not needed and is a waste, since the dev isn't expected to pass in a null-terminated String in the first place it is unneeded to use a null-terminated String. Allocating StringBuffer's with a full-length null String is an even bigger waste. See if it is possible to work around this once everything is working.

Defines:
CMS_USE_BIG_ENDIAN //Not supported because BlackBerry is little endian, just here so it is explicitly known that it isn't supported [well it is used but it shouldn't be changed, it would screw up pretty much everything]
CMS_DONT_USE_FAST_FLOOR
CMS_DONT_USE_PTHREADS
CMS_USE_PROFILE_BLACK_POINT_TAG
CMS_STRICT_CGATS
CMS_USE_IO_BIT_CONVERTER //Use java.io to convert value types to bytes and back
CMS_RAW_C //Code is similar, to near exact the same as C/C++, not fully used (obviously cumbersome) or implemented. If used there is no guarantee that it will work.
CMS_REALLOC_PTR //By default a C pointer passed into a function is independent of the original pointer unless it is a pointer to the pointer. Since VirtualPointer is a Java class that operation is reversed. This definition reverses the process back to the C process but depending on if the dev is willing to use more memory and the operation is really necessary it can be changed.
CMS_ENABLE_ASSERT //If not in debug compilation mode then assert is ignored, this explicitly enabled it.
CMS_USE_NATIVE_BIGINT //Use a native big int for big number math. This requires Certicom signing if used. By default it is not used
CMS_J2ME //J2ME only version of LCMS. No BlackBerry needed.

Implementation Notes:
Nearly everything is handled in standard C fashion so if an error occurs it knows the error ahead of time, specifies an error occured, cleans up, etc. This is the same here but there are a few places where exceptions can still occur (see notes below). It should be noted that they are not expected in any way and that it is hoped that the only exceptions that occur will gracefully be passed to the developer in the cmsSignalError function.
-MLU: If a 3+ char country/language code is passed and the 3rd char is not a null char.
-Helper functions:
--BitConverter: When converting bytes to a primitive; the array is null, startIndex is greater then the length of the array, or the array (at the specified startIndex) is not large enough.
--LargeNumber:
---A non-parseable number is passed in to the parse function to get parsed. LargeNumber is an unsigned integer, negative or decimal numbers will throw exceptions.
---When creating a new LargeNumber with an exponent, the exponent is greater then 1075 (technically any exponent can be used but if the number wrapped it would cause problems)
---When the CMS_USE_NATIVE_BIGINT define is not used, and a subtraction operation occurs that could cause the resulting number to be less then zero.
---When the CMS_USE_NATIVE_BIGINT define is not used, and a division operation occurs where the denominator is less then the numerator (so the result would have to be a decimal [yes a zero can be returned, and mod would just return the original number]).
--PrintUtility:
---Any bad format passed into the output or fscanf functions will throw a bad format exception.
---Though it should never happen, if a unsupported format is parsed, then the fscanf function is used.
---If a number with too many digits is passed into fscanf to get converted to an integer of some sort.
---If a really big (yet parseable) number is passed into fscanf and then expected to fit in a long data type (LargeNumber is not supported as of right now as a return data type).
---If a pointer is passed into fscanf.
--Utility: If a singleton is passed that already exists under the specified UID in the RuntimeStore.
--VirtualPointer:
---Should never happen, but if the built in Serializers fail to initialize.
---A null object is passed in to get serialized in the VirtualPointer constructor.
---Also in the VirtualPointer constructor, if a serializer for the type doesn't exist.
cmsSigChromaticAdaptationTag returns a double[], not a cmsMAT3 as what might be expected.
Some extra functions to handle any functions that take/return Strings so they handle Java Strings (no null terminator though it is supported). These functions have "Cleaned" appended to the end of the function.
RRT Signing is required.
cmssm.cmsGDBCompute's "alpha" loops where changed so they don't use <= and instead use just <

Small history on PrintUtility:
Done Jan. 1, 2011 at 1:55AM over Steam:
rcmaniac25: Just a few more lines of code and floating point printing will finally be done.
rcmaniac25: a month and a half. Nearly 40k lines of test code. Two previous attempts at libraries. About 300 test cases. Three automated utilities. 5 research papers. Hours of online research. One CS professor referenced. 4 decompiled OS files (totaling about 20k ASM codes). 3 OSs inspected. About 13 photos. And god knows how much food and liquid. It will finally be done...
rcmaniac25: That month and a half were just for this code. The many OS components and the other libraries took a couple months themselves
