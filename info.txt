TODO:
Implement actual code | Update VirtualPointer so it can work with arrays, this will take some work and might not work right away so do some research
**
cmslut
cmsgmt
cmsio1
cmsintrp
cmscnvrt
cmsps2
cmsvirt
cmsgamma
cmsnamed
cmssm
cmscam02
**

Finish floating point print formatter
Write print unformatters (and write sscanf)

Implement serializers

Figure out what the high-level structures should be, then...
Create high-level structures that handle color management in a true OOP fashion.

NOTES:
VirtualPointer piece is cumbersome but allows internal system to act more like C/C++. If used properly it should be fast and have a low overhead (except when deserializeing items).
Strings follow the guidelines listed in "http://docs.blackberry.com/en/developers/deliverables/3299/JDE_4.5_Fundamentals_Guide.pdf" which state not to use static final for Strings because then Strings need to be loaded multiple times and multiple instances of the same String exist.

Defines:
CMS_USE_BIG_ENDIAN //Not supported because BlackBerry is little endian, just here so it is explicitly known that it isn't supported
CMS_DONT_USE_FAST_FLOOR
CMS_DONT_USE_PTHREADS
CMS_USE_PROFILE_BLACK_POINT_TAG
CMS_STRICT_CGATS
USE_IO_BIT_CONVERTER //Use java.io to convert value types to bytes and back
RAW_C //Code is similar, to near exact the same as C/C++, not fully used (obviously cumbersome)
CMS_REALLOC_PTR //By default a C pointer passed into a function is independent of the original pointer unless it is a pointer to the pointer. Since VirtualPointer is a Java class that operation is reversed. This definition reverses the process back to the C process but depending on if the dev is willing to use more memory and the operation is really necessary it can be changed.